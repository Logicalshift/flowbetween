/***
 **
 ** FlowBetween File format version 2
 **
 **     - Add path elements
 **     - Split Flo_VectorElement into a type table and a keyframe/time table
 **     - Add strings for edit log entries
 **     - Add float and integer parameters for edit log entries
 **
 ***/

/* Going to rewrite the Flo_VectorElement table, which will invalidate the foreign key checks */
PRAGMA foreign_keys=OFF;

BEGIN;

/* Drop the triggers we'll recreate later */
DROP TRIGGER IF EXISTS Flo_Delete_KeyFrame_Elements;
DROP TRIGGER IF EXISTS Flo_Delete_BrushElements;
DROP TRIGGER IF EXISTS Flo_Delete_BrushPropertiesElements;
DROP TRIGGER IF EXISTS Flo_Delete_BrushPoints;

/* Rename Flo_VectorElement */
ALTER TABLE Flo_VectorElement RENAME TO Flo_OldVectorElement;

/*
 *  ===== Other schema changes
 */

/*
 * Required as SQLite is smart enough to rename the references to the element ID but is not
 * smart enough to let us rename it without entirely recreating the tables.
 */

ALTER TABLE Flo_BrushElement RENAME TO Flo_OldBrushElement;
ALTER TABLE Flo_BrushPropertiesElement RENAME TO Flo_OldBrushPropertiesElement;
ALTER TABLE Flo_BrushPoint RENAME TO Flo_OldBrushPoint;

/*
 * Vector brush element
 */
CREATE TABLE Flo_BrushElement (
    ElementId       INTEGER NOT NULL PRIMARY KEY REFERENCES Flo_VectorElement(ElementId),
    Brush           INTEGER NOT NULL REFERENCES Flo_Brush_Type(Brush),
    DrawingStyle    INTEGER NOT NULL
) WITHOUT ROWID;

/*
 * Vector brush properties element
 */
CREATE TABLE Flo_BrushPropertiesElement (
    ElementId           INTEGER NOT NULL PRIMARY KEY REFERENCES Flo_VectorElement(ElementId),
    BrushProperties     INTEGER NOT NULL REFERENCES Flo_BrushProperties(BrushProperties)
) WITHOUT ROWID;

/*
 * Brush point associated with an element
 */
CREATE TABLE Flo_BrushPoint (
    ElementId           INTEGER NOT NULL REFERENCES Flo_VectorElement(ElementId),
    PointId             INTEGER NOT NULL,

    X1                  REAL NOT NULL,
    Y1                  REAL NOT NULL,
    X2                  REAL NOT NULL,
    Y2                  REAL NOT NULL,
    X3                  REAL NOT NULL,
    Y3                  REAL NOT NULL,
    Width               REAL NOT NULL,

    PRIMARY KEY (ElementId, PointId)
) WITHOUT ROWID;

/*
 *  ===== Paths
 */

/*
 * Vector path element
 */
CREATE TABLE Flo_PathElement (
    /* The ID of this element */
    ElementId           INTEGER NOT NULL PRIMARY KEY REFERENCES Flo_VectorElement(ElementId),

    /* The ID of the path definition */
    PathId              INTEGER NOT NULL REFERENCES Flo_Path,

    /* The ID of the brush element used to draw this path */
    BrushId             INTEGER NOT NULL REFERENCES Flo_BrushElement(ElementId),

    /* The ID of the brush properties used to draw this path */
    BrushPropertiesId   INTEGER NOT NULL REFERENCES Flo_BrushPropertiesElement(ElementId)
) WITHOUT ROWID;

/*
 * Adds type information to path points
 *
 * This table is used when describing full paths, which we don't always need to do: it attaches
 * a type per path point stored in the Flo_PathPoints table (for the 'Close' path action, there
 * may not be an associated point)
 *
 * This is always used for example when defining a path element but is not needed when defining
 * a path edit that doesn't change the point meanings.
 */
CREATE TABLE Flo_PathPointType (
    PathId      INTEGER NOT NULL REFERENCES Flo_Path(PathId),
    PointIndex  INTEGER NOT NULL,
    Type        INTEGER NOT NULL,

    PRIMARY KEY (PathId, PointIndex)
) WITHOUT ROWID;

/*
 *  ===== Layer elements
 */

/*
 * Associates names with layers
 */
CREATE TABLE Flo_LayerName (
    /* Layer ID */
    LayerId INTEGER NOT NULL PRIMARY KEY REFERENCES Flo_LayerType(LayerId),

    /* Layer name */
    Name    Text NOT NULL
) WITHOUT ROWID;

CREATE TRIGGER Flo_Delete_LayerName BEFORE DELETE ON Flo_LayerType
    BEGIN
        DELETE FROM Flo_LayerName WHERE LayerId = Old.LayerId;
    END;

/*
 *  ===== Vector elements
 */

/*
 * Attaches a vector element to a keyframe and a time
 */
CREATE TABLE Flo_VectorElementTime (
    /* ID of this elemnent */
    ElementId   INTEGER NOT NULL PRIMARY KEY REFERENCES Flo_VectorElement(ElementId),

    /* The ID of the keyframe that this element belongs to */
    KeyFrameId          INTEGER NOT NULL REFERENCES Flo_LayerKeyFrame(KeyFrameId),

    /* When this element is added to the animation relative to when the keyframe started */
    AtTime              INTEGER NOT NULL
) WITHOUT ROWID;

DROP INDEX IF EXISTS FloIdx_ElementTime;
CREATE INDEX FloIdx_ElementTime ON Flo_VectorElementTime (KeyFrameId, AtTime, ElementId);

/* Populate the table with the current values */
INSERT INTO Flo_VectorElementTime (ElementId, KeyFrameId, AtTime) SELECT ElementId, KeyFrameId, AtTime FROM Flo_OldVectorElement;

/* Remove the columns from Flo_VectorElement */

/*
 * Represents an element in a vector layer
 */
CREATE TABLE Flo_VectorElement (
    /* Identifier for this element */
    ElementId           INTEGER NOT NULL PRIMARY KEY ASC AUTOINCREMENT,

    /* Type of this element */
    VectorElementType   INTEGER NOT NULL
);

/* Populate the table with the current values */
INSERT INTO Flo_VectorElement (ElementId, VectorElementType) SELECT ElementId, VectorElementType FROM Flo_OldVectorElement;

INSERT INTO Flo_BrushElement(ElementId, Brush, DrawingStyle)
    SELECT ElementId, Brush, DrawingStyle FROM Flo_OldBrushElement;
INSERT INTO Flo_BrushPropertiesElement(ElementId, BrushProperties)
    SELECT ElementId, BrushProperties FROM Flo_OldBrushPropertiesElement;
INSERT INTO Flo_BrushPoint(ElementId, PointId, X1, Y1, X2, Y2, X3, Y3, Width)
    SELECT ElementId, PointId, X1, Y1, X2, Y2, X3, Y3, Width FROM Flo_OldBrushPoint;

/*
 *  ===== Edit log entries
 */

/*
 * The string attached to an edit log entry
 */
CREATE TABLE Flo_EL_String (
    EditId      INTEGER NOT NULL PRIMARY KEY ASC REFERENCES Flo_EditLog(Id),
    String      Text NOT NULL
) WITHOUT ROWID;

/*
 * The integer parameters attached to an edit log entry
 */
CREATE TABLE Flo_EL_IntParameters (
    EditId      INTEGER NOT NULL REFERENCES Flo_EditLog(Id),
    IntIndex    INTEGER NOT NULL,
    Value       INTEGER NOT NULL,

    PRIMARY KEY (EditId ASC, IntIndex ASC)
) WITHOUT ROWID;

/*
 * The floating point parameters attached to an edit log entry
 */
CREATE TABLE Flo_EL_FloatParameters (
    EditId      INTEGER NOT NULL REFERENCES Flo_EditLog(Id),
    FloatIndex  INTEGER NOT NULL,
    Value       REAL NOT NULL,

    PRIMARY KEY (EditId ASC, FloatIndex ASC)
) WITHOUT ROWID;

/*
 *  ===== Triggers
 */

/* Deleting a key frame also deletes any vector elements it contains */
CREATE TRIGGER Flo_Delete_KeyFrame_Elements BEFORE DELETE ON Flo_LayerKeyFrame
    BEGIN
        DELETE FROM Flo_VectorElement WHERE ElementId IN (SELECT ElementId FROM Flo_VectorElementTime WHERE KeyFrameId = Old.KeyFrameId);
        DELETE FROM Flo_VectorElementTime WHERE KeyFrameId = Old.KeyFrameId;
    END;

/* Deleting a vector element deletes the attached brush elements */
CREATE TRIGGER Flo_Delete_BrushElements BEFORE DELETE ON Flo_VectorElement
    BEGIN
        DELETE FROM Flo_BrushElement WHERE ElementId = Old.ElementId;
    END;

/* Deleting a vector element deletes the attached brush properties elements */
CREATE TRIGGER Flo_Delete_BrushPropertiesElements BEFORE DELETE ON Flo_VectorElement
    BEGIN
        DELETE FROM Flo_BrushPropertiesElement WHERE ElementId = Old.ElementId;
    END;

/* Deleting a vector element deletes the points elements */
CREATE TRIGGER Flo_Delete_BrushPoints BEFORE DELETE ON Flo_VectorElement
    BEGIN
        DELETE FROM Flo_BrushPoint WHERE ElementId = Old.ElementId;
    END;

/* Deleting an element deletes it from the time table */
CREATE TRIGGER Flo_DeleteVectorElementTime BEFORE DELETE ON Flo_VectorElement
    BEGIN
        DELETE FROM Flo_VectorElementTime WHERE ElementId = Old.ElementId;
    END;

/* Deleting an element deletes it from the path table */
CREATE TRIGGER Flo_Delete_PathElements BEFORE DELETE ON Flo_VectorElement
    BEGIN
        DELETE FROM Flo_PathElement WHERE ElementId = Old.ElementId;
    END;

/* Old vector element table no longer exists */
DROP TABLE Flo_OldBrushPoint;
DROP TABLE Flo_OldBrushElement;
DROP TABLE Flo_OldBrushPropertiesElement;
DROP TABLE Flo_OldVectorElement;

UPDATE FlowBetween SET DataVersion=2;

/* Verify integrity */
PRAGMA foreign_keys=ON;
PRAGMA foreign_key_check;

COMMIT;
VACUUM;
