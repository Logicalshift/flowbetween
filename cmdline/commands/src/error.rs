use flo_animation::*;

use std::fmt;
use std::fmt::{Display, Formatter};

///
/// The errors that can be generated by a command
///
#[derive(Clone, Debug, PartialEq)]
pub enum CommandError {
    /// An animation could not be opened
    CouldNotOpenAnimation(String),

    /// An animation could not be created
    CouldNotCreateAnimation(String),

    /// An edit on the specified line number could not be parsed
    CannotParseEdit(usize, String),

    /// The operation requires a frame to be selected
    NoFrameSelected,

    /// The element ID was not found
    ElementNotFound(ElementId)
}

impl Display for CommandError {
    fn fmt(&self, fmt: &mut Formatter) -> Result<(), fmt::Error> {
        use self::CommandError::*;

        match self {
            CouldNotOpenAnimation(name)     => write!(fmt, "Could not open animation '{}'", name),
            CouldNotCreateAnimation(name)   => write!(fmt, "Coult not create animation '{}'", name),
            CannotParseEdit(line, edit)     => write!(fmt, "{}: cannot parse edit '{}'", line, edit),
            NoFrameSelected                 => write!(fmt, "A frame must be selected for this operation"),
            ElementNotFound(id)             => write!(fmt, "Element {} was not found", id.id().map(|id| id.to_string()).unwrap_or("<unassigned>".to_string()))
        }
    }
}
